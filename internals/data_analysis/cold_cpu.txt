# R 4.5.1 started.
# 
# R version 4.5.1 (2025-06-13) -- "Great Square Root"
# Copyright (C) 2025 The R Foundation for Statistical Computing
# Platform: aarch64-apple-darwin20
# 
# R is free software and comes with ABSOLUTELY NO WARRANTY.
# You are welcome to redistribute it under certain conditions.
# Type 'license()' or 'licence()' for distribution details.
# 
#   Natural language support but running in an English locale
# 
# R is a collaborative project with many contributors.
# Type 'contributors()' for more information and
# 'citation()' on how to cite R or R packages in publications.
# 
# Type 'demo()' for some demos, 'help()' for on-line help, or
# 'help.start()' for an HTML browser interface to help.
# Type 'q()' to quit R.
# 
source("/Users/ruidazhou/code/green-lab/Cold CPU.R", echo = TRUE)
# 
# > install.packages(c("tidyverse", "ggplot2", "bestNormalize", "ARTool", "lmerTest", "xtable",
# +                   "dplyr", "viridis"))
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/tidyverse_2.0.0.tgz'
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/ggplot2_4.0.0.tgz'
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/bestNormalize_1.9.1.tgz'
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/ARTool_0.11.2.tgz'
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/lmerTest_3.1-3.tgz'
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/xtable_1.8-4.tgz'
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/dplyr_1.1.4.tgz'
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/viridis_0.6.5.tgz'
# 
# The downloaded binary packages are in
# 	/var/folders/7q/6bh483l55dldmn0m93yq85th0000gn/T//RtmpbjVjad/downloaded_packages
# 
# > install.packages("remotes")
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/remotes_2.5.0.tgz'
# Content type 'application/x-gzip' length 431784 bytes (421 KB)
# ==================================================
# downloaded 421 KB
# 
# 
# The downloaded binary packages are in
# 	/var/folders/7q/6bh483l55dldmn0m93yq85th0000gn/T//RtmpbjVjad/downloaded_packages
# 
# > install.packages("FSA")
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/FSA_0.10.0.tgz'
# Content type 'application/x-gzip' length 1372832 bytes (1.3 MB)
# ==================================================
# downloaded 1.3 MB
# 
# 
# The downloaded binary packages are in
# 	/var/folders/7q/6bh483l55dldmn0m93yq85th0000gn/T//RtmpbjVjad/downloaded_packages
# 
# > install.packages("effsize")
# trying URL 'https://cran.rstudio.com/bin/macosx/big-sur-arm64/contrib/4.5/effsize_0.8.1.tgz'
# Content type 'application/x-gzip' length 64409 bytes (62 KB)
# ==================================================
# downloaded 62 KB
# 
# 
# The downloaded binary packages are in
# 	/var/folders/7q/6bh483l55dldmn0m93yq85th0000gn/T//RtmpbjVjad/downloaded_packages
# 
# > library(effsize)
# 
# > library(FSA)
# ## FSA v0.10.0. See citation('FSA') if used in publication.
# ## Run fishR() for related website and fishR('IFAR') for related book.
# 
# > library(tidyverse)
# ── Attaching core tidyverse packages ─────────────────────────────────────────────────────────────────────────────────── tidyverse 2.0.0 ──
# ✔ dplyr     1.1.4     ✔ readr     2.1.5
# ✔ forcats   1.0.1     ✔ stringr   1.5.2
# ✔ ggplot2   4.0.0     ✔ tibble    3.3.0
# ✔ lubridate 1.9.4     ✔ tidyr     1.3.1
# ✔ purrr     1.1.0     
# ── Conflicts ───────────────────────────────────────────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
# ✖ dplyr::filter() masks stats::filter()
# ✖ dplyr::lag()    masks stats::lag()
# ℹ Use the conflicted package ([object Object])  to force all conflicts to become errors
# 
# > library(ggplot2)
# 
# > library(bestNormalize)
# Registered S3 method overwritten by 'butcher':
#   method                 from    
#   as.character.dev_topic generics
# 
# > library(ARTool)
# Registered S3 methods overwritten by 'car':
#   method       from
#   hist.boot    FSA 
#   confint.boot FSA 
# 
# > library(lmerTest)
# Loading required package: lme4
# Loading required package: Matrix
# 
# Attaching package: ‘Matrix’
# 
# The following objects are masked from ‘package:tidyr’:
# 
#     expand, pack, unpack
# 
# 
# Attaching package: ‘lmerTest’
# 
# The following object is masked from ‘package:lme4’:
# 
#     lmer
# 
# The following object is masked from ‘package:stats’:
# 
#     step
# 
# 
# > library(xtable)
# 
# > library(remotes)
# 
# > remotes::install_github("hrbrmstr/hrbrthemes")
# Using GitHub PAT from the git credential store.
# Skipping install of 'hrbrthemes' from a github remote, the SHA1 (d3fd0294) has not changed since last install.
#   Use `force = TRUE` to force installation
# 
# > library(dplyr)
# 
# > library(viridis)
# Loading required package: viridisLite
# 
# > library(hrbrthemes)
# 
# > dat_data <- read.csv("./run_table.csv") %>%
# +   select(
# +     benchmark,
# +     compilation,
# +     cold_start_energy, warm_start_energy,
# +     cold_s .... [TRUNCATED] 
# 
# > # Data preparation
# > dat_dependent_var <- dat_data %>%
# +   select(benchmark, compilation, cold_start_cpu_util) %>%
# +   mutate(
# +     benchmark = fac .... [TRUNCATED] 
# 
# > # Min Max Mean Median SD
# > summary_stats <- dat_dependent_var %>%
# +   group_by(benchmark, compilation) %>%
# +   summarise(
# +     n = n(),
# +     min = .... [TRUNCATED] 
# 
# > # Descriptive stats (min, max, mean, median, sd):
# > print(summary_stats, n = Inf)
# # A tibble: 24 × 8
#    benchmark                   compilation     n   min   max  mean median    sd
#    <fct>                       <fct>       <int> <dbl> <dbl> <dbl>  <dbl> <dbl>
#  1 binary_trees                cython         15  78.5  81.5  79.7   79.5 1.03 
#  2 binary_trees                numba          15  95.3  96.1  95.7   95.7 0.204
#  3 binary_trees                original       15  83.8  87.6  85.8   85.9 0.876
#  4 fannkuch                    cython         15  54.1  66.4  60.0   61.4 3.71 
#  5 fannkuch                    numba          15  70.1  74.5  72.2   72.0 1.20 
#  6 fannkuch                    original       15  58.0  68.1  63.9   64.9 3.17 
#  7 insertionsort               cython         15  58.2  67.5  63.1   63.5 2.84 
#  8 insertionsort               numba          15  77.4  83.2  80.1   79.7 1.59 
#  9 insertionsort               original       15  58.1  69.3  62.3   61.9 2.43 
# 10 mandlebrot                  cython         15  53.6  62.8  57.5   57.3 2.37 
# 11 mandlebrot                  numba          15  65.8  74.0  70.8   71.2 2.31 
# 12 mandlebrot                  original       15  59.2  69.4  63.0   62.8 2.75 
# 13 nbody                       cython         15  78.1  84.6  80.1   79.7 1.51 
# 14 nbody                       numba          15  70.6  77.1  74.0   74.0 1.67 
# 15 nbody                       original       15  76.6  80.8  78.7   78.6 1.16 
# 16 recur_matrix_multiplication cython         15  52.3  63.6  57.3   56.1 3.55 
# 17 recur_matrix_multiplication numba          15  84.8  88.4  86.6   86.7 1.07 
# 18 recur_matrix_multiplication original       15  73.2  79.1  75.2   75.1 1.63 
# 19 richards                    cython         15  81.4  85.3  82.9   83.0 0.974
# 20 richards                    numba          15  67.4  72.7  69.7   69.0 1.59 
# 21 richards                    original       15  78.4  83.3  79.9   79.8 1.19 
# 22 spectral_norm               cython         15  86.1  89.3  87.5   87.7 0.892
# 23 spectral_norm               numba          15  77.7  81.8  79.6   79.6 1.20 
# 24 spectral_norm               original       15  87.3  90.5  89.1   89.1 0.825
# 
# > # Volin + Box
# > ggplot(dat_dependent_var, aes(x = compilation, y = cold_start_cpu_util, fill = compilation)) +
# +   geom_violin(alpha = 0.8, trim = F .... [TRUNCATED] 
# 
# > # Normality check
# > shapiro_results <- dat_dependent_var %>%
# +   group_by(benchmark, compilation) %>%
# +   summarise(
# +     n = n(),
# +     p_value =  .... [TRUNCATED] 
# `summarise()` has grouped output by 'benchmark'. You can override using the `.groups` argument.
# 
# > # Normality Check Results
# > print(shapiro_results, n = Inf)
# # A tibble: 24 × 5
#    benchmark                   compilation     n p_value normal
#    <fct>                       <fct>       <int>   <dbl> <chr> 
#  1 binary_trees                cython         15 0.157   Yes   
#  2 binary_trees                numba          15 0.759   Yes   
#  3 binary_trees                original       15 0.185   Yes   
#  4 fannkuch                    cython         15 0.530   Yes   
#  5 fannkuch                    numba          15 0.909   Yes   
#  6 fannkuch                    original       15 0.229   Yes   
#  7 insertionsort               cython         15 0.481   Yes   
#  8 insertionsort               numba          15 0.865   Yes   
#  9 insertionsort               original       15 0.0215  No    
# 10 mandlebrot                  cython         15 0.979   Yes   
# 11 mandlebrot                  numba          15 0.697   Yes   
# 12 mandlebrot                  original       15 0.421   Yes   
# 13 nbody                       cython         15 0.00589 No    
# 14 nbody                       numba          15 0.719   Yes   
# 15 nbody                       original       15 0.589   Yes   
# 16 recur_matrix_multiplication cython         15 0.222   Yes   
# 17 recur_matrix_multiplication numba          15 0.905   Yes   
# 18 recur_matrix_multiplication original       15 0.170   Yes   
# 19 richards                    cython         15 0.507   Yes   
# 20 richards                    numba          15 0.408   Yes   
# 21 richards                    original       15 0.0316  No    
# 22 spectral_norm               cython         15 0.811   Yes   
# 23 spectral_norm               numba          15 0.497   Yes   
# 24 spectral_norm               original       15 0.968   Yes   
# 
# > # Kruskal–Wallis test
# > kw_result <- dat_dependent_var %>%
# +   group_by(benchmark) %>%
# +   summarize(
# +     kw = list(kruskal.test(cold_start_cpu_ut .... [TRUNCATED] 
# 
# > # Kruskal-Wallis Test Results
# > print(kw_result, n = Inf)
# # A tibble: 8 × 6
#   benchmark                   kw      statistic    df       p_value significant
#   <fct>                       <list>      <dbl> <int>         <dbl> <chr>      
# 1 binary_trees                <htest>      39.1     2 0.00000000318 Yes        
# 2 fannkuch                    <htest>      32.3     2 0.0000000983  Yes        
# 3 insertionsort               <htest>      29.8     2 0.000000339   Yes        
# 4 mandlebrot                  <htest>      36.6     2 0.0000000114  Yes        
# 5 nbody                       <htest>      31.9     2 0.000000116   Yes        
# 6 recur_matrix_multiplication <htest>      39.1     2 0.00000000318 Yes        
# 7 richards                    <htest>      37.3     2 0.00000000791 Yes        
# 8 spectral_norm               <htest>      35.7     2 0.0000000179  Yes        
# 
# > # Post-hoc test
# > kw_result_dunn <- dat_dependent_var %>%
# +   group_by(benchmark) %>%
# +   summarize(
# +     dunn = list(dunnTest(
# +       cold_start_ .... [TRUNCATED] 
# 
# > # Dunn's post-hoc test results (Bonferroni-adjusted):
# > print(kw_result_dunn, n = Inf)
# # A tibble: 24 × 6
#    benchmark                   Comparison             Z  P.unadj         P.adj significant
#    <fct>                       <chr>              <dbl>    <dbl>         <dbl> <chr>      
#  1 binary_trees                cython - numba    -6.26  3.96e-10 0.00000000119 Yes        
#  2 binary_trees                cython - original -3.13  1.76e- 3 0.00529       Yes        
#  3 binary_trees                numba - original   3.13  1.76e- 3 0.00529       Yes        
#  4 fannkuch                    cython - numba    -5.55  2.91e- 8 0.0000000874  Yes        
#  5 fannkuch                    cython - original -1.71  8.73e- 2 0.262         No         
#  6 fannkuch                    numba - original   3.84  1.25e- 4 0.000374      Yes        
#  7 insertionsort               cython - numba    -4.36  1.31e- 5 0.0000393     Yes        
#  8 insertionsort               cython - original  0.667 5.05e- 1 1             No         
#  9 insertionsort               numba - original   5.03  5.02e- 7 0.00000151    Yes        
# 10 mandlebrot                  cython - numba    -6.05  1.48e- 9 0.00000000443 Yes        
# 11 mandlebrot                  cython - original -2.92  3.51e- 3 0.0105        Yes        
# 12 mandlebrot                  numba - original   3.13  1.76e- 3 0.00529       Yes        
# 13 nbody                       cython - numba     5.56  2.69e- 8 0.0000000808  Yes        
# 14 nbody                       cython - original  1.90  5.69e- 2 0.171         No         
# 15 nbody                       numba - original  -3.66  2.56e- 4 0.000769      Yes        
# 16 recur_matrix_multiplication cython - numba    -6.26  3.96e-10 0.00000000119 Yes        
# 17 recur_matrix_multiplication cython - original -3.13  1.76e- 3 0.00529       Yes        
# 18 recur_matrix_multiplication numba - original   3.13  1.76e- 3 0.00529       Yes        
# 19 richards                    cython - numba     6.10  1.04e- 9 0.00000000313 Yes        
# 20 richards                    cython - original  2.82  4.77e- 3 0.0143        Yes        
# 21 richards                    numba - original  -3.28  1.04e- 3 0.00311       Yes        
# 22 spectral_norm               cython - numba     3.43  5.96e- 4 0.00179       Yes        
# 23 spectral_norm               cython - original -2.52  1.19e- 2 0.0356        Yes        
# 24 spectral_norm               numba - original  -5.95  2.68e- 9 0.00000000805 Yes        
# 
# > # quantify difference (% diff and cliff's delta)
# > # For each significant pair from Dunn's test, compute:
# > #   (a) percentage difference in medians .... [TRUNCATED] 
# 
# > # 2) Start from significant Dunn pairs and attach both groups' vectors/medians
# > filtered_yes_dunn <- kw_result_dunn %>%
# +   filter(significant == " ..." ... [TRUNCATED] 
# 
# > # Effect size (Cliff's delta) and percentage median difference for significant Dunn pairs:
# > print(filtered_yes_dunn, n = Inf)
# # A tibble: 21 × 10
#    benchmark                   group1 group2      n1    n2 median1 median2 pct_diff cliffs_delta cliffs_interpretation
#    <fct>                       <chr>  <chr>    <int> <int>   <dbl>   <dbl>    <dbl>        <dbl> <chr>                
#  1 binary_trees                cython numba       15    15    79.5    95.7    16.9        -1     large                
#  2 binary_trees                cython original    15    15    79.5    85.9     7.37       -1     large                
#  3 binary_trees                numba  original    15    15    95.7    85.9   -11.5         1     large                
#  4 fannkuch                    cython numba       15    15    61.4    72.0    14.7        -1     large                
#  5 fannkuch                    numba  original    15    15    72.0    64.9   -10.9         1     large                
#  6 insertionsort               cython numba       15    15    63.5    79.7    20.4        -1     large                
#  7 insertionsort               numba  original    15    15    79.7    61.9   -28.7         1     large                
#  8 mandlebrot                  cython numba       15    15    57.3    71.2    19.6        -1     large                
#  9 mandlebrot                  cython original    15    15    57.3    62.8     8.78       -0.911 large                
# 10 mandlebrot                  numba  original    15    15    71.2    62.8   -13.5         0.956 large                
# 11 nbody                       cython numba       15    15    79.7    74.0    -7.73        1     large                
# 12 nbody                       numba  original    15    15    74.0    78.6     5.89       -0.964 large                
# 13 recur_matrix_multiplication cython numba       15    15    56.1    86.7    35.3        -1     large                
# 14 recur_matrix_multiplication cython original    15    15    56.1    75.1    25.3        -1     large                
# 15 recur_matrix_multiplication numba  original    15    15    86.7    75.1   -15.4         1     large                
# 16 richards                    cython numba       15    15    83.0    69.0   -20.2         1     large                
# 17 richards                    cython original    15    15    83.0    79.8    -3.98        0.902 large                
# 18 richards                    numba  original    15    15    69.0    79.8    13.5        -1     large                
# 19 spectral_norm               cython numba       15    15    87.7    79.6   -10.2         1     large                
# 20 spectral_norm               cython original    15    15    87.7    89.1     1.47       -0.804 large                
# 21 spectral_norm               numba  original    15    15    79.6    89.1    10.6        -1     large                
# Warning messages:
# 1: There was 1 warning in `summarize()`.
# ℹ In argument: `kw = list(kruskal.test(cold_start_cpu_util ~ compilation, data = cur_data()))`.
# ℹ In group 1: `benchmark = binary_trees`.
# Caused by warning:
# ! `cur_data()` was deprecated in dplyr 1.1.0.
# ℹ Please use `pick()` instead.
# This warning is displayed once every 8 hours.
# Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. 
# 2: There were 16 warnings in `mutate()`.
# The first warning was:
# ℹ In argument: `cliffs_delta = tryCatch(...)`.
# ℹ In row 1.
# Caused by warning in `cliff.delta.default()`:
# ! The samples are fully disjoint, using approximate Confidence Interval estimation
# ℹ Run dplyr::last_dplyr_warnings() ([object Object])  to see the 15 remaining warnings. 